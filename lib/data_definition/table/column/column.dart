import 'package:dart_store/data_definition/constraint/constraint.dart';

/// This class represents and Column in a table.
abstract class Column {
  /// The constraints of the column.
  List<SQLConstraint> constraints;

  /// The name of the attribute the column was generated by in the model.
  String name;

  Column({
    required this.constraints,
    required this.name,
  });

  bool get isAutoIncrement => constraint<PrimaryKey>()?.autoIncrement == true;
  bool get isForeignKey => hasConstraint<ForeignKey>();
  bool get isNullable => !hasConstraint<NotNull>();
  bool get isPrimaryKey => hasConstraint<PrimaryKey>();
  bool get isUniqe => hasConstraint<Unique>();

  /// The name of the attribute of the model this column was extracted from in snake_case in order to be compatible with almost all databases and be SQL conform.
  String get sqlName;
  Constraint? constraint<Constraint extends SQLConstraint>() =>
      constraints.whereType<Constraint>().firstOrNull;

  ForeignKeyType? getForeignKey<ForeignKeyType>() =>
      constraints.whereType<ForeignKeyType>().firstOrNull;

  /// Returns true if the column has a constraint of type [T].
  hasConstraint<T>() => constraints.any((element) => element is T);

  @override
  String toString() =>
      "Column(name: $name, constraints: $constraints, sqlName: $sqlName)";

  toStringDetailed() =>
      "Column(name: $name, constraints: $constraints, sqlName: $sqlName, isPrimaryKey: $isPrimaryKey, isUniqe: $isUniqe, isNullable: $isNullable, isAutoIncrement: $isAutoIncrement, isForeignKey: $isForeignKey)";
}
